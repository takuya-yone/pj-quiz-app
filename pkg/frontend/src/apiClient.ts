/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Cats example
 * The cats API description
 * OpenAPI spec version: 1.0
 */
import {
  faker
} from '@faker-js/faker';

import {
  HttpResponse,
  delay,
  http
} from 'msw';

import type {
  AppServiceType
} from './model';

/**
 * @summary Get sample data
 */
export type appControllerGetHelloResponse200 = {
  data: AppServiceType
  status: 200
}
    
export type appControllerGetHelloResponseComposite = appControllerGetHelloResponse200;
    
export type appControllerGetHelloResponse = appControllerGetHelloResponseComposite & {
  headers: Headers;
}

export const getAppControllerGetHelloUrl = () => {


  

  return `http://localhost:4000/`
}

export const appControllerGetHello = async ( options?: RequestInit): Promise<appControllerGetHelloResponse> => {
  
  const res = await fetch(getAppControllerGetHelloUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: appControllerGetHelloResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as appControllerGetHelloResponse
}


export const getAppControllerGetHelloResponseMock = (overrideResponse: Partial< AppServiceType > = {}): AppServiceType => ({message: faker.string.alpha(20), ...overrideResponse})


export const getAppControllerGetHelloMockHandler = (overrideResponse?: AppServiceType | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<AppServiceType> | AppServiceType)) => {
  return http.get('*/', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAppControllerGetHelloResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getCatsExampleMock = () => [
  getAppControllerGetHelloMockHandler()
]
